public class Solution {

    public String longestPalindrome(String s) {
        
        if (s.length() == 0 || s == null) {
          return "";
        }
        char[] c = s.toCharArray();
        
        int cur = 0;
        StringBuilder sb = new StringBuilder();
        
        for (int i = 0; i < c.length; i++) {
            if (isPanlindrome (s, i - cur, i)) {
                sb = new StringBuilder();
                sb.append(s.substring(i - cur, i + 1));
                cur++;
            } else if (isPanlindrome (s, i - cur - 1, i)) {
                sb = new StringBuilder();
                sb.append(s.substring(i - cur - 1, i + 1));
                cur += 2;
            }
        }
        
        return sb.toString();
    }
    public boolean isPanlindrome (String s, int start, int end) {
        if (start < 0) {
            return false;
        }
        while (start < end) {
            if (s.charAt(start++) != s.charAt(end--))
                return false;
        }
        return true;
    }
}


// Method 2: o(n^2) o(1)

String result = "";
public String longestPalindrome(String s) {

	for (int i = 0; i < s.length(); i++) {
		helepr (s, i, 0);
		helper (s, i, 1);
	}
	return result;

}

public void helper (Stirng s, int pos, int offset) {
	int left = pos;
	int right = pos + offset;
	while (0 <= left && right < s.length() && s.charAt(left) == s.charAt(right)) {
		left--;
		right++;
	}
	String cur = s.substring(left + 1, right);
	if (cur.length() > result.length()) {
		result = cur;
	}

}

