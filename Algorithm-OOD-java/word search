class TrieNode {
    String word;
    TrieNode[] children;
    int val;
    TrieNode(int val) {
        this.children = new TrieNode[26];
        this.val = val;
    }
}
public class Solution {
    
    public ArrayList<String> wordSearchII(char[][] board, ArrayList<String> words) {
        // write your code here
        ArrayList<String> result = new ArrayList<>();
        if (words.size() == 0 || words == null || board.length == 0 || board[0].length == 0 || board == null) {
            return result;
        }
        
        TrieNode root = buildTree(words);
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                helper (result, board, i, j, root);
            }
        }
        return result;
    }
    
    public TrieNode buildTree (ArrayList<String> words) {
        TrieNode root = new TrieNode(-1);
        for (String word : words) {
            TrieNode cur = root;
            for (char w : word.toCharArray()) {
                if (cur.children[w - 'a'] == null) {
                    cur.children[w - 'a'] = new TrieNode(w - 'a');
                }
                cur = cur.children[w - 'a'];
            }
            cur.word = word;
        }
        return root;
    }
    
    public void helper (ArrayList<String> result, char[][] board, int i, int j, TrieNode root) {
        
        char c = board[i][j];
        if (board[i][j] == '#' || root.children[c - 'a'] == null) {
            return;
        }
        
        root = root.children[c - 'a'];
        if (root.word != null) {
            result.add(root.word);
            root.word = null;
        }
        
        
        board[i][j] = '#';
        
        
        if (0 <= i - 1 && i - 1 < board.length) {
            helper (result, board, i - 1, j, root);
        } 
        if (0 <= i + 1 && i + 1 < board.length) {
            helper (result, board, i + 1, j, root);
        }
        if (0 <= j - 1 && j - 1 < board[0].length) {
            helper (result, board, i, j - 1, root);
        }
        if (0 <= j + 1 && j + 1 < board[0].length) {
            helper (result, board, i, j + 1, root);
        }
        
        board[i][j] = c;
    }
    
}
