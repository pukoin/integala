class Point {
    public int x, y, val;
    public Point(int x, int y, int val) {
        this.x = x;
        this.y = y;
        this.val = val;
    }
} 

    public int kthSmallest(int[][] matrix, int k) {
        // write your code here
        if (matrix.length == 0 || matrix[0].length == 0 || matrix == null) {
            return 0;
        }
        if (k > matrix.length * matrix[0].length) {
            return 0;
        }

        
        PriorityQueue<Point> heap = new PriorityQueue<Point>(k, new Comparator<Point>() {
            public int compare(Point left, Point right) {
                return left.val - right.val;
            }
        });
        
        for (int i = 0; i < Math.min(matrix.length, k); i++) {
            heap.offer(new Point(i, 0, matrix[i][0]));
        }
        
        for (int i = 0; i < k - 1; i++) {
            Point curr = heap.poll();
            if (curr.y + 1 < matrix[0].length) {
                heap.offer(new Point(curr.x, curr.y + 1, matrix[curr.x][curr.y + 1]));
            }
        }
        return heap.peek().val;
    }
