http://pfmiles.github.io/blog/algorithms-in-job-interview-test-if-two-linked-lists-intersected/

首先，无环的情况；无环是《编程之美》原书里的题目，很多人都反应说这个题相对书中其它题来讲太过于简单了。
也确实，只要在纸上把“所有单向链表相交的情况”画出来很容易就能想通解法了（只要正确理解题意，那么“两个无环单向链表”画出来只可能是2条不相干的链表或一个”Y”
字形） —— 所以，判断两个不带环的链表是否相交，只要将两个链表的头指针都移到链表尾，然后比较尾指针地址是否相等就可以了。 
如果带环，个人总结，要明白以下几点：

无环链表和有环链表是不可能相交的;
两个有环链表若相交，其“整个环上”的所有node一定都重合;
有环链表的相交，情况只有2种：相交于”环上”或相交于”不是环的部分”,即下图所示;两种情况都需要使用“两个指针的追逐”方法来判断两个链表的环部分是否相交; 
带环单向链表相交只有2种情况
有关链表追逐的考虑: 相对速度、距离、时间要算好，否则很容易漏掉几种边界情况;
